[{"path":"/articles/1_introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction","text":"EvoTraceR R package identifiy analyse Amplicon Sequence Variants performing experiment EVoBC kit.","code":""},{"path":"/articles/1_introduction.html","id":"installing-evotracer","dir":"Articles","previous_headings":"","what":"Installing EvoTraceR","title":"Introduction","text":"R version EvoTraceR can installed Github. , need install R packages EvoTraceR depends devtools package. Users also virtual enviroment (created example thorugh anaconda), python dependencies installed. case users want taken care automatically, can unload reticulate (case already loaded) prior installing EvoTraceR. Otherwise, can setup anaconda enviroment dependencies ahve manually installed. dependencies following: Numpy version 1.21.5 Numba Cassiopeia-lineage umi_tools order handle fastq files forward reverse reads, EvoTraceR uses trimmomatic flash tools perform adapters trimming, discard low quality bases merge forward reverse reads. order use packages, users install trimmomatic [flash]{https://ccb.jhu.edu/software/FLASH/}. Finally, case reticulate setup automatically install process, users need call following function finish setup restart R.","code":"# install EvoTraceR dependencies if (!require(\"devtools\")) install.packages(\"devtools\") if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") if (!require(\"tidyverse\")) install.packages(\"tidyverse\") if (!require(\"cli\")) install.packages(\"cli\") if (!require(\"Biostrings\")) BiocManager::install(\"Biostrings\") if (!require(\"pwalign\")) BiocManager::install(\"pwalign\") if (!require(\"benthos\")) install.packages(\"benthos\") #if (!require(\"lemon\")) install.packages(\"lemon\") if (!require(\"scales\")) install.packages(\"scales\") if (!require(\"utils\")) install.packages(\"utils\") if (!require(\"methods\")) install.packages(\"methods\") if (!require(\"data.table\")) install.packages(\"data.table\") if (!require(\"ggtree\")) BiocManager::install(\"ggtree\") if (!require('foreach')) install.packages('foreach') if (!require('doParallel')) install.packages('doParallel') if (!require('parallel')) install.packages('parallel') if (!require('reticulate')) install.packages('reticulate') # Run only if reticulate has been manually setup: # library(reticulate) # reticulate::use_condaenv('EvoTraceR_enviroment') # Install EvoTraceR #devtools::install_github(\"Nowak-Lab/EvoTraceR\", ref = \"master\") #, auth_token=\"<github-generated-auth-token>\") devtools::load_all(\".\") # load EvoTraceR library library(\"EvoTraceR\") setup_reticulate()"},{"path":"/articles/2_running_REvoBC.html","id":"setup-the-environement","dir":"Articles","previous_headings":"","what":"Setup the environement","title":"Running EvoTraceR","text":"EvoTraceR computational tool inside project EvoBC. performing EvoBC experiments lab, tool can exploited perform analysis Amplicon Sequence Variants. order perform analysis, multiple functions perform different steps analysis pipeline. first step initializes EvoTraceR object, list gets populated step--step multiple fields containing result analysis. initialization function computes set Amplicon Sequence Variants. calls trimmomatic flash tools perform adapters trimming, discard low quality bases merge forward reverse reads. main parameters initialization directory output stored one following: input directory: case users fastq files want perform whole analysis using EvoTraceR. case need provide path folder containing fastq (may compressed), can provide additional parameter dada2 functions. trimmomatic_path: Local path executable Trimmomatic. flash_path. Local path executable Flash. Important: fastq file pair (forward reverse) must associated sample experiment performed. sample can either organ mouse ID timepoint case longitudinal data provided. order EvoTraceR associate fastq pair sample users two options: one name fastq following pattern: FILEPREFIX_SAMPLE_FILESUFFIX_RX.fastq, FILEPREFIX FILESUFFIX can string (without “_” character). case EvoTraceR consider sample ID second field separated underscore. second option provide list associates filename (without suffix _R1 _R2) corresponding sample. example, forward reverse files named file1_R1.fastq file1_R2.fastq correspond organ PRL (code Prostate Left), parameter set : map_file_sample = c(“file1” = “PRL”)). Users can skip initialization step vignette, output pre-computed can loaded calling data(EvoTraceR_initialized). can now perform initialization. computation, unique sequences sample identified. next steps sequences cleaned.","code":"library(\"EvoTraceR\") # Run in case reticulate was setup manually: # library(reticulate) # reticulate::use_condaenv('EvoTraceR_enviroment') input_dir = system.file(\"extdata\", \"input\", package = \"EvoTraceR\") output_dir = system.file(\"extdata\", \"output\", package = \"EvoTraceR\") EvoTraceR_object = initialize_EvoTraceR(input_dir = input_dir,                                          output_dir = output_dir,                                          trimmomatic_path = '~/Trimmomatic 0.xx/trimmomatic-0.xx.jar',                                         flash_path = '~/*/FLASH-x.x.x/flash')"},{"path":"/articles/2_running_REvoBC.html","id":"analysis-and-pairwise-alignment-of-asvs","dir":"Articles","previous_headings":"","what":"Analysis and pairwise alignment of ASVs","title":"Running EvoTraceR","text":"function performs analysis ASV sequences identified previous steps aligns reference sequence. First, pools together sequences characterized Hamming distance equals lower 2. performs pairwise alignment using Needleman-Wunsch global alignment algorithm implemented function pairwiseAlignment package pwalign, aligning sequence original barcode considered analysis (See pwalign documentation details). identifying indels (insertions identified start position number nucleoides inserted, deletions identified start end position), removes ones small don’t span cut site: perform filter, expands start end position number bases specified parameter cleaning_window, counts number cut sites spanned expansion removes span 0 sites. Next, pools together sequences differ one another substitutions. computes normalized counts ASV sample, dividing count total number sequences sample multiplying 1e6, yelding Counts Per Million (CPM). normalization, counts summed ASV, sequences showing frequency lower threshold specified parameter asv_count_cutoff removed. Finally, performs filtering sequences based flanking sequences. , using CPM computes different statistics final ASVS, storing: relative frequency ASVs sample. relative frequency ASV samples. counts ASV normalized counts sample maximum frequency. frequency different ASVs sample. Users can skip step vignette, output pre-computed can loaded calling data(EvoTraceR_analyzed). new fields: clean_asv_dataframe contains counts detected ASV filtering (.e. filtering contamination identification NMBC). reference information reference sequence considered analysis. clean_asv_dataframe: ASV sequences identified post-filtering (contamination removed, sequences similarity higher pid_cutoff_nmbc original barcode aggregated ASVs named increasing order (ASV01, ASV02, etc.) according total counts. reference: Info reference sequence used current analysis. statistics: new list contains results computation (see manual detailed explanation). Among fields asv_df_percentages, contains normalized counts, asv_diversity_perSample contains measures clonal heterogeneity. alignment: new list containing result alignment step. alignment, EvoTraceR identifies, position original reference, number alterations found different ASVs. computation stores result new field mutations_df. function reconstructs phylogenetic tree using Cassiopeia’s suite. uses greedy algorithm, iteratively splits set ASVs clusters based common mutation iteration. Finally, function combines one dataframe data computed phylogenetic analysis. Save EvoTraceR_object","code":"EvoTraceR_object = asv_analysis(EvoTraceR_object = EvoTraceR_object) names(EvoTraceR_object) EvoTraceR_object = analyse_mutations(EvoTraceR_object) EvoTraceR_object = infer_phylogeny(EvoTraceR_object) EvoTraceR_object = create_df_summary(EvoTraceR_object) save(EvoTraceR_object, file=\"./data/EvoTraceR_object.RData\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucrezia Patruno. Maintainer, author. Daniele Ramazzotti. Author. Armin Scheben. Author. Stephen Staklinski. Author. Rebecca Hassett. Author. Dylan Riffle. Author. Dawid Nowak. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Patruno L, Ramazzotti D, Scheben , Staklinski S, Hassett R, Riffle D, Nowak D (2024). EvoTraceR: EvoTraceR. R package version 1.0.3, https://github.com/Nowak-Lab/EvoTraceR.","code":"@Manual{,   title = {EvoTraceR: EvoTraceR},   author = {Lucrezia Patruno and Daniele Ramazzotti and Armin Scheben and Stephen Staklinski and Rebecca Hassett and Dylan Riffle and Dawid Nowak},   year = {2024},   note = {R package version 1.0.3},   url = {https://github.com/Nowak-Lab/EvoTraceR}, }"},{"path":"/index.html","id":"evotracer---evolutionary-lineage-tracing-in-r","dir":"","previous_headings":"","what":"EvoTraceR","title":"EvoTraceR","text":"EvoTraceR R package analyse sequencing amplicon data CRISPR-Cas9 recorder lineage tracing experiments. package takes paired-end FASTQ files one many tissues. sequenced amplicon can contain one many Cas9 cut sites. EvoTraceR trims merges reads, collapses duplicates, calls mutations infers tree. package outputs inferred tree relationships Amplicon Sequence Variants (ASVs) well summary plots tables mutations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"EvoTraceR","text":"package can installed using devtools. EvoTraceR can also installed method conda environment. Based experience, clean environment installed r-base, r-essentials, r-devtools conda-forge channel works well.","code":"library(devtools) install_github(\"Nowak-Lab/EvoTraceR\") conda create -n evotracer conda install -c conda-forge r-base conda install -c conda-forge r-essentials conda install -c conda-forge r-devtools"},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"EvoTraceR","text":"flash trimmomatic Binaries dependencies can downloaded via links . dependencies handled devtools package installation.","code":""},{"path":"/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage example","title":"EvoTraceR","text":"simulated toy dataset available test EvoTraceR. sequences generated single simulated mouse MMUS1469 taken cancer populations two tissues (labelled PRL HMR). CRISPR-Cas9 recorder design designated BC10v0. naming scheme FASTQ files thus MMUS1469_PRL_BC10v0_MG_120419. Note EvoTraceR expects similar input file names tissue labels position naming scheme. get started analysis, provide directory containing input FASTQ files. also provide output directory paths trimmomatic flash binaries system (adjust paths needed system). preprocess input data initialize_EvoTraceR function. Now FASTQ data cleaned paired reads merged, align merged reads reference call indels. , use asv_analysis function provide unedited template sequence ref_seq expected flanking sequences. also provide 1-based reference sequence coordinates expected Cas9 cut sites borders individual target regions (e.g., guide=20bp, PAM=3bp, spacer=3bp). information used filter sequences unexpected mutation patterns. additional options alignment parameters, parallelization , see documentation. Finally, process mutations, infer tree output summaries results.","code":"library(EvoTraceR) input_dir <- system.file(\"extdata\", \"input\", package = \"EvoTraceR\") output_dir <- \"example_output\" trimmomatic_path <- \"/my/path/trimmomatic.jar\" flash_path <- \"/my/path/flash\"  EvoTraceR_object <-   initialize_EvoTraceR(     input_dir = input_dir,     output_dir = output_dir,     trimmomatic_path = trimmomatic_path,     flash_path = flash_path) EvoTraceR_object <-   asv_analysis(EvoTraceR_object = EvoTraceR_object,                ref_name = \"BC10v0\",                ref_seq = \"TCTACACGCGCGTTCAACCGAGGAAAACTACACACACGTTCAACCACGGTTTTTTACACACGCATTCAACCACGGACTGCTACACACGCACTCAACCGTGGATATTTACATACTCGTTCAACCGTGGATTGTTACACCCGCGTTCAACCAGGGTCAGATACACCCACGTTCAACCGTGGTACTATACTCGGGCATTCAACCGCGGCTTTCTGCACACGCCTACAACCGCGGAACTATACACGTGCATTCACCCGTGGATC\",                ref_flank_left = \"^TCTAC\",                ref_flank_right = \"CCCGTGGATC$\",                ref_cut_sites = c(17, 43, 69, 95, 121, 147, 173, 199, 225, 251),                ref_border_sites = c(1, 26, 52, 78, 104, 130, 156, 182, 208, 234)) EvoTraceR_object <-   analyse_mutations(EvoTraceR_object = EvoTraceR_object)  EvoTraceR_object <-   infer_phylogeny(EvoTraceR_object = EvoTraceR_object, mutations_use = \"del_ins\")  EvoTraceR_object <-   create_df_summary(EvoTraceR_object)"},{"path":"/index.html","id":"output-files","dir":"","previous_headings":"","what":"Output files","title":"EvoTraceR","text":"running example analysis, following output files generated. two key files follow-analyses follows. asv_stat.csv: Summary detected amplicon sequence variants (ASVs) mutations input FASTQ files tree_all_clones.newick: Tree phylogenetic relationships ASVs based detected mutations","code":"example_output/ |-- asv_analysis |   |-- asv_filtering_freq.pdf |   `-- asv_length_freq.pdf |-- fastq_analysis |   |-- fastq_flash_merged |   |-- fastq_summary.csv |   `-- fastq_trimmed `-- phylogeny_analysis     `-- phylogeny_del_ins         |-- asv_stat.csv         |-- tree_all_clones.csv         `-- tree_all_clones.newick"},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"EvoTraceR","text":"Please feel free contact us feedback: Dawid Nowak, dgn2001 med.cornell.edu Armin Scheben, ascheben cshl.edu.","code":""},{"path":"/reference/EvoTraceR_object.html","id":null,"dir":"Reference","previous_headings":"","what":"example data obtained from running function asv_analys, where the original barcode is identified and all ASVs are aligned to it. — EvoTraceR_object","title":"example data obtained from running function asv_analys, where the original barcode is identified and all ASVs are aligned to it. — EvoTraceR_object","text":"example data obtained running function asv_analys, original barcode identified ASVs aligned .","code":""},{"path":"/reference/EvoTraceR_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"example data obtained from running function asv_analys, where the original barcode is identified and all ASVs are aligned to it. — EvoTraceR_object","text":"","code":"data(EvoTraceR_object)"},{"path":"/reference/EvoTraceR_object.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"example data obtained from running function asv_analys, where the original barcode is identified and all ASVs are aligned to it. — EvoTraceR_object","text":"EvoTraceR object updated following fields: clean_asv_dataframe: ASV sequences identified post-filtering (contamination removed, sequences similarity higher pid_cutoff_nmbc original barcode aggregated ASVs named increasing order (ASV01, ASV02, etc.) according total counts. reference: Info reference sequence used current analysis. statistics: another list following sub-fields: alignment, another list following fields: asv_names: name ASV sample: sample identifier position_bc260: position alteration original barcode. Note insertions assigned position coincides beginning. alt: type alteration. wt = Wild Type (.e. non-mutated position). sub = substitution. del = deletion. ins = insertion. ref_asv read_asv : respectively, reference nucleotide observed original barcode one observed sequence.","code":""},{"path":"/reference/analyse_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"analyse_mutations — analyse_mutations","title":"analyse_mutations — analyse_mutations","text":"function considers pairwise alignment output performed asv_analysis computes overall frequency sample mutation every barcode position.","code":""},{"path":"/reference/analyse_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analyse_mutations — analyse_mutations","text":"","code":"analyse_mutations(EvoTraceR_object)"},{"path":"/reference/analyse_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"analyse_mutations — analyse_mutations","text":"EvoTraceR_object EvoTraceR object.","code":""},{"path":"/reference/analyse_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"analyse_mutations — analyse_mutations","text":"EvoTraceR object field alignment, updated mutations_df: dataframe containing position ASV corresponding mutation state frequency mutation sequences.","code":""},{"path":"/reference/analyse_mutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"analyse_mutations — analyse_mutations","text":"","code":"if (FALSE) { # \\dontrun{ data(EvoTraceR_analyzed) EvoTraceR_object = analyse_mutations(EvoTraceR_object) } # }"},{"path":"/reference/asv_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"ASV_analysis — asv_analysis","title":"ASV_analysis — asv_analysis","text":"function performs analysis ASV sequences identified previous steps aligns reference sequence. First, pools together sequences characterized Hamming distance equals lower 2, summing counts. perform step, EvoTraceR uses sequence clusering agorithm impemented python package UMI-tools performs pairwise alignment using Needleman-Wunsch global alignment algorithm implemented function pairwiseAlignment package pwalign, aligning sequence original barcode considered analysis. (See pwalign documentation details). identifying indels (insertions identified start position number nucleoides inserted, deletions identified start end position), removes ones small span cut site: perform filter, exapnds start end position number bases specified parameter cleaning_window, counts number cut sites spanned expantion removes span 0 sites. Next, pools together sequences differ one another substitutions. computes normalized counts ASV sample, dividing count total number sequences sample multiplying 1e6, yelding Counts Per Million (CPM). normalization, counts summed ASV, sequences showing frequency lower threshold specified parameter asv_count_cutoff removed. Finally, performs filtering sequences based flanking sequences.","code":""},{"path":"/reference/asv_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASV_analysis — asv_analysis","text":"","code":"asv_analysis(   EvoTraceR_object,   ref_name = \"BC10v0\",   ref_seq =     \"TCTACACGCGCGTTCAACCGAGGAAAACTACACACACGTTCAACCACGGTTTTTTACACACGCATTCAACCACGGACTGCTACACACGCACTCAACCGTGGATATTTACATACTCGTTCAACCGTGGATTGTTACACCCGCGTTCAACCAGGGTCAGATACACCCACGTTCAACCGTGGTACTATACTCGGGCATTCAACCGCGGCTTTCTGCACACGCCTACAACCGCGGAACTATACACGTGCATTCACCCGTGGATC\",   ref_flank_left = \"^TCTAC\",   ref_flank_right = \"CCCGTGGATC$\",   flanking_filtering = \"right\",   ref_cut_sites = c(17, 43, 69, 95, 121, 147, 173, 199, 225, 251),   ref_border_sites = c(1, 26, 52, 78, 104, 130, 156, 182, 208, 234),   output_figures = TRUE,   asv_count_cutoff = 2,   pwa_gapOpening = -25,   pwa_gapExtension = 0,   pwa_match = 15,   pwa_mismatch = -4,   pwa_type = \"global\",   cleaning_window = c(3, 3),   batch_size = 100,   cores = parallel::detectCores() )"},{"path":"/reference/asv_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ASV_analysis — asv_analysis","text":"EvoTraceR_object (Required). Object class EvoTraceR, result function initialize_EvoTraceR ref_name String indicating ID reference sequence used experiment. Default 'BC10v0', ref_seq String indicating reference sequence used experimenti. Default 'TCTACACGCGCGTTCAACCGAGGAAAACTACACACACGTTCAACCACGGTTTTTTACACACGCATTCAACCACGGACTGCTACACACGCACTCAACCGTGGATATTTACATACTCGTTCAACCGTGGATTGTTACACCCGCGTTCAACCAGGGTCAGATACACCCACGTTCAACCGTGGTACTATACTCGGGCATTCAACCGCGGCTTTCTGCACACGCCTACAACCGCGGAACTATACACGTGCATTCACCCGTGGATC', ref_flank_left String indicating first nucleotides reference sequence never mutate course experiment. Default \"^TCTAC\", ref_flank_right String indicating first nucleotides reference sequence never mutate course experiment. Default \"CCCGTGGATC$\", flanking_filtering among flaning regions use filter contaminated sequences. Must one c('left', 'right', '', 'either'), default '' ref_cut_sites Positions reference sequence cutting sites. Default c(17, 42, 68, 94, 120, 146, 171, 198, 224, 251), ref_border_sites c(26, 52, 78, 104, 130, 156, 182, 208, 234). output_figures (Optional). Default TRUE: Boolean indicating whether user whishes store figure indicating number ASV tracked different steps analysis. asv_count_cutoff (Optional). Default 2. Minimum number counts Counts Per Million (CPM) ASV considered statistics. pwa_gapOpening (Optional). Default -25. Parameter gapOpening passed pairwiseAlignment pwalign (See description). pwa_gapExtension (Optional). Default 0. Parameter gapExtension passed pairwiseAlignment pwalign (See description). Default 0. pwa_match (Optional). Default 15. Parameter indicating score matches pairwise alignment pwalign. parameter, together previous one, used construct substitution matrix used function pairwiseAlignment. pwa_mismatch (Optional). Default -4. Parameter indicating penalty mismatch events pairwise alignment pwalign. pwa_type (Optional). Parameter indicating type pairwise alignment. Must one One \"global\", \"local\", \"overlap\", \"global-local\", \"local-global\". details see original documentation cleaning_window (Optional). Default c(3,3). Vector containing number nucleotides use extending respectively start end position indel determine ones span cut sites thus get removed. (See description information). batch_size (Optional). Default 100. Number batches split reads parallel execution pairwiseAlignment. parameter can tuned together cores parameter optimize speed alignment. cores (Optional). Default parallel::detectCores(). Number cores use pairwise alignment.","code":""},{"path":"/reference/asv_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ASV_analysis — asv_analysis","text":"EvoTraceR object passed parameter following new fields: clean_asv_dataframe: ASV sequences identified post-filtering (contamination removed, sequences similarity higher pid_cutoff_nmbc original barcode aggregated ASVs named increasing order (ASV01, ASV02, etc.) according total counts. reference: Info reference sequence used current analysis. statistics: another list following sub-fields: asv_df_percentages: dataframe six columns. asv_names name ASV. sample sample identifier (e.g. ID organ , case longitudinal data, timepoint); count: total counts per million specific ASV specific sample; perc_in_sample: CPM normalized total counts corresponding sample; perc_asv: CPM normalized total counts corresponding ASV; perc_fold_to_max: CPM normalized maximum counts observed corresponding ASV sample. asv_totalCounts: ASV, total counts number samples detected. sample_totalcounts: sample, total counts number distinct ASVs detected. asv_diversity_persample: measures clonal richness measures heterogeneity computed sample based ASVs detected. asv_persample_frequency: counts ASV sample. asv_persample_detection: binary matrix indicating whether sequence detected corresponding sample. asv_toBarcode_similarity: edit distance, percentage similarity alignment score ASV compared original barcode. all_asv_statistics: statistics computed ASV grouped together tibble. alignment, another list following fields: Binary_mutation_matrix: binary matrix encoding presence/absence mutation ASV. asv_barcode_alignment: tibble line corresponds position ASV, columns encode following information: asv_names: name ASV sample: sample identifier position_bc260: position alteration original barcode. Note insertions assigned position coincides beginning. alt: type alteration. wt = Wild Type (.e. non-mutated position). sub = substitution. del = deletion. ins = insertion. ref_asv, read_asv: respectively, reference nucleotide observed original barcode one observed sequence. mutations_coordinates: dataframe containing list mutations, start end position. ASV_alterations_width: dataframe containing number nucleotides affected type mutation ASV. function saves figure asv_filtering_freq.pdf, barplot indicating change number sequences processing steps.","code":""},{"path":"/reference/asv_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASV_analysis — asv_analysis","text":", using CPM computes different statistics final ASVS, storing:  relative frequency ASVs sample.  relative frequency ASV samples.  counts ASV normalized counts sample maximum frequency.  frequency different ASVs sample.","code":""},{"path":"/reference/asv_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ASV_analysis — asv_analysis","text":"","code":"if (FALSE) { # \\dontrun{ data(EvoTraceR_object) EvoTraceR_object = asv_analysis(EvoTraceR_object = EvoTraceR_object) } # }"},{"path":"/reference/create_df_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"create_df_summary — create_df_summary","title":"create_df_summary — create_df_summary","text":"function combines one dataframe data computed phylogenetic analysis.","code":""},{"path":"/reference/create_df_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_df_summary — create_df_summary","text":"","code":"create_df_summary(EvoTraceR_object)"},{"path":"/reference/create_df_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_df_summary — create_df_summary","text":"EvoTraceR_object (Required).","code":""},{"path":"/reference/create_df_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_df_summary — create_df_summary","text":"EvoTraceR_object field named plot_summary containing dataframe df_to_plot_final. dataframe containins information computed within package ASV sample.","code":""},{"path":"/reference/create_df_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_df_summary — create_df_summary","text":"","code":"if (FALSE) { # \\dontrun{ EvoTraceR_object = create_df_summary(EvoTraceR_object) } # }"},{"path":"/reference/infer_phylogeny.html","id":null,"dir":"Reference","previous_headings":"","what":"infer_phylogeny — infer_phylogeny","title":"infer_phylogeny — infer_phylogeny","text":"function reconstructs phylogenetic tree using Cassiopeia suite. uses greedy algorithm, iteratively splits set ASVs clusters based common mutation iteration. Note requires installing cassiopeia anaconda/virtual enviroment used reticulate.","code":""},{"path":"/reference/infer_phylogeny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"infer_phylogeny — infer_phylogeny","text":"","code":"infer_phylogeny(EvoTraceR_object, mutations_use = \"del_ins\")"},{"path":"/reference/infer_phylogeny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"infer_phylogeny — infer_phylogeny","text":"EvoTraceR_object (Required) mutations_use (optional). Default = 'del_ins' string indicating type mutations use phylogeny reconstruction. Can one c('del', 'del_ins'). first corresponds using cleaned deletions. second refers case cleaned deletions insertions considered.","code":""},{"path":"/reference/infer_phylogeny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"infer_phylogeny — infer_phylogeny","text":"EvoTraceR object new field called phylogeny, stores: mutations_in_phylogeny: string indicating mutations used phylogeny reconstruction. tree: dataframe storing tree returned b y Cassiopeia. dataframe column \"group\" indicates  clonal population node belongs (clonal population cluster returned Cassiopeia). tree_phylo: phylo object containing tree returned Cassiopeia. tree_uncollapsed: phylo object containing tree returned Cassiopeia prior collapsing mutationless edges.","code":""},{"path":"/reference/infer_phylogeny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"infer_phylogeny — infer_phylogeny","text":"","code":"if (FALSE) { # \\dontrun{ EvoTraceR_object = infer_phylogeny(EvoTraceR_object) } # }"},{"path":"/reference/initialize_EvoTraceR.html","id":null,"dir":"Reference","previous_headings":"","what":"initialize_EvoTraceR — initialize_EvoTraceR","title":"initialize_EvoTraceR — initialize_EvoTraceR","text":"function initializes EvoTraceR object, computing set Amplicon Sequence Variants. calls trimmomatic flash perform adapters trimming, discard low quality bases merge forward reverse reads.","code":""},{"path":"/reference/initialize_EvoTraceR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initialize_EvoTraceR — initialize_EvoTraceR","text":"","code":"initialize_EvoTraceR(   output_dir,   trimmomatic_path,   flash_path,   input_dir = NULL,   map_file_sample = NULL,   sample_order = \"alphabetical\" )"},{"path":"/reference/initialize_EvoTraceR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"initialize_EvoTraceR — initialize_EvoTraceR","text":"output_dir (Required). Path directory output files stored. function output  file quality_track_reads.csv, containing track number sequences different steps. trimmomatic_path (Required). Local path executable Trimmomatic. details download please see . flash_path (Required). Local path executable Flash. details download please see . input_dir Path directory containing .fastq files forward reverse reads. folder contain fastq files (2 sample) following name pattern: FILEPREFIX_SAMPLE_BARCODEVERSION_R1.fastq FILEPREFIX_SAMPLE_BARCODEVERSION_R1.fastq. SAMPLE refers either organ (case multiple organs sequenced) timepoint (longitudinal data provided). Note EvoTraceR support mixed sample types (.e. samples must either organs timepoints). map_file_sample (Optional). case fastq files names format  FILEPREFIX_SAMPLE_FILESUFFIX_RX.fastq), users provide list associates filename (without suffix _R1 _R2) corresponding organ/day. (e.g., forward reverse files named file1_R1.fastq file1_R2.fastq correspond organ PRL (code Prostate Left), parameter set : map_file_sample = c(\"file1\" = \"PRL\")). sample_order (Optional). Vector containing order user wants samples appear plots. NULL alphabetical order set.","code":""},{"path":"/reference/initialize_EvoTraceR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"initialize_EvoTraceR — initialize_EvoTraceR","text":"object type EvoTraceR, list contain following fields: fastq_directory: directory input fastq files located. output_directory: directory output files stored. map_file_sample: dataframe many rows input datasets, input stores sample (e.g. organ day longitudinal data) associated. asv_prefilter: dataframe stores sequences detected preliminary steps. Note sequences still need filtered (see also asv_analysis). . function also saves .csv file quality_track_reads.csv: track number sequences trimming merging steps.","code":""},{"path":"/reference/initialize_EvoTraceR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"initialize_EvoTraceR — initialize_EvoTraceR","text":"","code":"if (FALSE) { # \\dontrun{ input_dir = system.file(\"extdata\", \"input\", package = \"EvoTraceR\") output_dir = system.file(\"extdata\", \"output\", package = \"EvoTraceR\") EvoTraceR_object = initialize_EvoTraceR(input_dir = input_dir, output_dir = output_dir, trimmomatic_path = '/path/to/trimmomatic.jar', flash_path = '/path/to/flash_bin_directory') } # }"},{"path":"/reference/setup_reticulate.html","id":null,"dir":"Reference","previous_headings":"","what":"setup_reticulate — setup_reticulate","title":"setup_reticulate — setup_reticulate","text":"function loads reticulate needs run installation package","code":""},{"path":"/reference/setup_reticulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setup_reticulate — setup_reticulate","text":"","code":"setup_reticulate()"}]
